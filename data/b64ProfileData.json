{
  "profile": {
    "name": "Erik Weisser",
    "description": "Hohe Qualität und umfassende Expertise aus einer Hand! Bei Interesse an maßgeschneiderten Lösungen, freue ich mich auf ein unverbindliches Erstgespräch, um Ihr Anliegen individuell zu besprechen.",
    "photo": "assets/images/profile.jpg",
    "background": "assets/images/background.jpg"
  },
  "cardElements": [
    {
      "title": "Telefon",
      "description": "+49 151 19418139",
      "href": "callto:+4915119418139",
      "icon": "fa-phone"
    },
    {
      "title": "SMS",
      "description": "+49 151 19418139",
      "href": "sms:+4915119418139",
      "icon": "fa-comment-sms"
    },
    {
      "title": "Email",
      "description": "erik@weisser.dev",
      "href": "mailto:erik@weisser.dev",
      "icon": "fa-envelope"
    },
    {
      "title": "Resume CV / Lebenslauf",
      "description": "Current Resume CV | Mein aktueller Lebenslauf",
      "href": "https://cv.weisser.dev",
      "icon": "assets/icons/logo.svg"
    },
    {
      "title": "Website",
      "description": "https://weisser.dev/",
      "href": "https://weisser.dev",
      "icon": "fa-link"
    }
  ],
  "socialMediaElements": [
    "https://github.com/weisser-dev/",
    "https://www.linkedin.com/in/erik-weisser/",
    "https://wa.me/4915119418139"
  ],
  "footer": {
    "copyright": {
      "text": "© weisser.dev"
    },
    "linkElements": [
      {
        "title": "Design",
        "description": "Das Design der Seite findet ihr hier",
        "href": "https://github.com/weisser-dev/my-digital-card",
        "icon": "fa-solid fa-pen"
      },
      {
        "title": "Impressum",
        "modal": "true",
        "href": "",
        "modalMarkdownContent":"Impressum\n\n## Angaben gemäß § 5 TMG\n\nErik Weisser  \nWeisser  \nAm Hang 1  \n96486 Lautertal\n\n## Kontakt\n\nTelefon: +49 151 194 181 39  \nE-Mail: erik@weisser.dev\n\n## EU-Streitschlichtung\n\nDie Europäische Kommission stellt eine Plattform zur Online-Streitbeilegung (OS) bereit: [https://ec.europa.eu/consumers/odr/](https://ec.europa.eu/consumers/odr/).  \nUnsere E-Mail-Adresse finden Sie oben im Impressum.\n\n## Verbraucher\u00ADstreit\u00ADbeilegung/Universal\u00ADschlichtungs\u00ADstelle\n\nWir sind nicht bereit oder verpflichtet, an Streitbeilegungsverfahren vor einer Verbraucherschlichtungsstelle teilzunehmen.\n\nQuelle: [https://www.e-recht24.de/impressum-generator.html](https://www.e-recht24.de/impressum-generator.html)",
        "icon": "fa-scale-unbalanced"
      }
    ]
  }
}
